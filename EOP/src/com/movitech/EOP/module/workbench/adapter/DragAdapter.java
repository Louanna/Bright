package com.movitech.EOP.module.workbench.adapter;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.Handler;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.TextView;import com.androidquery.callback.AjaxStatus;import com.androidquery.callback.BitmapAjaxCallback;import com.movit.platform.common.application.BaseApplication;import com.movit.platform.common.constants.CommConstants;import com.movit.platform.framework.core.okhttp.OkHttpUtils;import com.movit.platform.framework.core.okhttp.callback.StringCallback;import com.movit.platform.framework.helper.MFAQueryHelper;import com.movit.platform.framework.utils.PicUtils;import com.movit.platform.framework.helper.MFSPHelper;import com.movit.platform.framework.utils.StringUtils;import com.movit.platform.framework.view.pageIndicator.CirclePageIndicator;import com.movitech.EOP.Test.R;import com.movitech.EOP.module.workbench.activity.WebViewActivity;import com.movitech.EOP.module.workbench.constants.Constants;import com.movitech.EOP.module.workbench.model.WorkTable;import com.movitech.EOP.view.DragGridViewPage;import com.movitech.EOP.view.DragGridViewPage.DragGridBaseAdapter;import com.movitech.EOP.view.DragGridViewPage.onItemDelectAndSwapCallback;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.List;import java.util.Map;import okhttp3.Call;import okhttp3.Request;/** * @author xiaanming * @blog http://blog.csdn.net/xiaanming */public class DragAdapter extends BaseAdapter implements DragGridBaseAdapter {    private List<WorkTable> list;    private LayoutInflater mInflater;    private int mHidePosition = -1;    Context context;    Handler handler;    private int mFinallyPosition = -1;    private int mDragedPosition = -1;    DragGridViewPage dragGridViewPage;    ArrayList<WorkTable> allList = new ArrayList<WorkTable>();    private List<WorkTable> addList = new ArrayList<WorkTable>();    String tag;    boolean isShowDel = false;    private ViewPager viewPager;    private List<Map<String, String>> imageList;    private List<View> mListViews = new ArrayList<View>();    private int UnreadEmail = 0;    private ImageViewPageAdapter topNewsAdapter;    private ImageViewChange imageViewChange;    public DragAdapter(Context context, List<WorkTable> list,                       DragGridViewPage dragGridViewPage, Handler handler, String tag) {        this.list = list;        mInflater = LayoutInflater.from(context);        this.context = context;        this.handler = handler;        this.dragGridViewPage = dragGridViewPage;        this.tag = tag;        imageViewChange = new ImageViewChange();        reSetData();    }    public void reSetData() {        allList.clear();        addList.clear();        if (null != list) {            if (dragGridViewPage.ismCustomerEnable()) {                if (list.size() < dragGridViewPage.getCustomerPostion()) {                    for (int i = list.size(); i < dragGridViewPage.getCustomerPostion(); i++) {                        addList.add(new WorkTable());                    }                }                allList.addAll(list);                allList.addAll(addList);                allList.add(dragGridViewPage.getCustomerPostion(), new WorkTable());                if (list.size() > dragGridViewPage.getCustomerPostion()) {                    dragGridViewPage.setAvalableChildCount(list.size() + 1);                } else {                    dragGridViewPage.setAvalableChildCount(list.size());                }            } else {                allList.addAll(list);                dragGridViewPage.setAvalableChildCount(list.size());            }        }    }    private Map<String, Integer> unReadNums;    public void setUnreadNums(Map<String, Integer> unReadNums) {        this.unReadNums = unReadNums;    }    public void addEmailUnreadNums(int preUnread) {        this.notifyDataSetChanged();    }    public void reduceEmailUnreadNums(int preUnread) {    }    @Override    public int getCount() {        return allList.size();    }    @Override    public Object getItem(int position) {        return allList.get(position);    }    @Override    public long getItemId(int position) {        return position;    }    /**     * 由于复用convertView导致某些item消失了，所以这里不复用item，     */    @Override    public View getView(final int position, View convertView, ViewGroup parent) {        if (convertView == null) {            if (position == dragGridViewPage.getCustomerPostion()) {                convertView = mInflater.inflate(R.layout.work_table_viewpage, null);            } else {                convertView = mInflater.inflate(                        R.layout.work_table_gridview_item, null);            }        }        convertView.setVisibility(View.VISIBLE);        final WorkTable table = allList.get(position);        if (position != dragGridViewPage.getCustomerPostion()) {            final TextView name = (TextView) convertView                    .findViewById(R.id.gridview_item_name);            final ImageView photo = (ImageView) convertView                    .findViewById(R.id.gridview_item_img);            ImageView delImg = (ImageView) convertView                    .findViewById(R.id.gridview_item_delImg);            TextView redDian = (TextView) convertView                    .findViewById(R.id.gridview_item_dian);            //增加未读数提醒            if (null != unReadNums && unReadNums.size() > 0 && unReadNums.containsKey(table.getAndroid_access_url())                    && unReadNums.get(table.getAndroid_access_url()) > 0) {                if (unReadNums.get(table.getAndroid_access_url()) > 99) {                    redDian.setText("99+");                } else {                    redDian.setText("" + unReadNums.get(table.getAndroid_access_url()));                }                redDian.setVisibility(View.VISIBLE);            } else {                redDian.setVisibility(View.GONE);            }            if (tag.equals("add")) {                delImg.setImageResource(R.drawable.icon_add_2);            } else if (tag.equals("del")) {                delImg.setImageResource(R.drawable.icon_del);            }            if (!TextUtils.isEmpty(table.getId())) {                delImg.setVisibility(View.INVISIBLE);                delImg.setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        clearDrag();                        dragGridViewPage.onItemDelectAndSwap(position,                                dragGridViewPage.getAvalableChildCount() - 1,                                new onItemDelectAndSwapCallback() {                                    @Override                                    public void swapDone() {                                        if (tag.equals("del")) {                                            dragGridViewPage                                                    .setOnItemDelectAndSwapCallback(null);                                            list.remove(table);                                            reSetData();                                            notifyDataSetChanged();                                            handler.obtainMessage(33, table)                                                    .sendToTarget();                                        } else if (tag.equals("add")) {                                            dragGridViewPage                                                    .setOnItemDelectAndSwapCallback(null);                                            list.remove(table);                                            reSetData();                                            notifyDataSetChanged();                                            handler.obtainMessage(33, table)                                                    .sendToTarget();                                        }                                    }                                });                    }                });                if (table.getId().equals("more")) {                    name.setText(context.getString(R.string.more));                    if (!"default".equals(MFSPHelper                            .getString(BaseApplication.SKINTYPE))) {                        String skinType = MFSPHelper                                .getString(BaseApplication.SKINTYPE);                        File dir = context                                .getDir("theme", Context.MODE_PRIVATE);                        File skinDir = new File(dir, skinType);                        Bitmap bitmap = BitmapFactory.decodeFile(skinDir                                + "/ico_more.png");                        photo.setImageBitmap(bitmap);                    } else {                        photo.setImageResource(R.drawable.ico_more);                    }                } else {                    name.setText(table.getName());                    BitmapAjaxCallback callback = new BitmapAjaxCallback() {                        @Override                        protected void callback(String url, ImageView iv,                                                Bitmap bm, AjaxStatus status) {                            if (Constants.STATUS_UNAVAILABLE.equals(table.getStatus())) {                                try {                                    Bitmap gray = PicUtils.bitmap2Gray(bm);                                    iv.setImageBitmap(gray);                                } catch (Exception e) {                                    e.printStackTrace();                                }                            } else {                                super.callback(url, iv, bm, status);                            }                        }                    };                    MFAQueryHelper.setImageView(photo, CommConstants.URL_DOWN + table.getPicture(), R.drawable.zone_pic_default);                }            } else {                convertView.setVisibility(View.INVISIBLE);            }        } else {            viewPager = (ViewPager) convertView.findViewById(R.id.view_pager);            CirclePageIndicator mIndicator = (CirclePageIndicator) convertView.findViewById(R.id.indicator);            topNewsAdapter = new ImageViewPageAdapter(imageList, mListViews);            viewPager.setAdapter(topNewsAdapter);            mIndicator.setViewPager(viewPager);            mHandler.removeCallbacks(imageViewChange);            mHandler.postDelayed(imageViewChange, 5000);            initViewPage(convertView);        }        if (position == mHidePosition && position != dragGridViewPage.getCustomerPostion()) {            convertView.setVisibility(View.INVISIBLE);        }        return convertView;    }    private void initViewPage(View convertView) {        String url = CommConstants.URL_EOP_API + "r/sys/app/picture/getBanners";        OkHttpUtils                .getWithToken()                .url(url)                .build()                .execute(new MyStringCallback(convertView));    }    public class MyStringCallback extends StringCallback {        private View convertView;        public MyStringCallback(View convertView) {            this.convertView = convertView;        }        @Override        public void onBefore(Request request) {            super.onBefore(request);        }        @Override        public void onAfter() {            super.onAfter();        }        @Override        public void onError(Call call, Exception e) {            e.printStackTrace();        }        @Override        public void onResponse(String response) {            if (StringUtils.notEmpty(response)) {                try {                    JSONObject responseObj = new JSONObject(response);                    if (StringUtils.notEmpty(responseObj.get("objValue"))) {                        JSONArray responseArr = responseObj.getJSONArray("objValue");                        imageList = new ArrayList<>();                        for (int i = 0; i < responseArr.length(); i++) {                            JSONObject imageObj = responseArr.getJSONObject(i);                            if (StringUtils.notEmpty(imageObj)) {                                Map<String, String> imageMap = new HashMap<>();                                imageMap.put("imageLink", imageObj.getString("link"));                                imageMap.put("imagePath", imageObj.getString("picurl"));                                imageList.add(imageMap);                            }                        }//                        viewPager = (ViewPager) convertView.findViewById(R.id.view_pager);//                        CirclePageIndicator mIndicator = (CirclePageIndicator) convertView.findViewById(R.id.indicator);                        mListViews.clear();                        for (int i = 0; i < imageList.size(); i++) {                            LayoutInflater inflater = LayoutInflater.from(context);                            View view = inflater.inflate(R.layout.work_table_view_page_item, null);                            mListViews.add(view);                        }                        topNewsAdapter.setValue(imageList, mListViews);                        topNewsAdapter.notifyDataSetChanged();//                        ImageViewPageAdapter topNewsAdapter = new ImageViewPageAdapter(imageList, mListViews);//                        viewPager.setAdapter(topNewsAdapter);//                        mIndicator.setViewPager(viewPager);//                        mHandler.postDelayed(new ImageViewChange(), 5000);                    }                } catch (JSONException e) {                    e.printStackTrace();                }            }        }        @Override        public void inProgress(float progress) {        }    }    class ImageViewChange implements Runnable {        @Override        public void run() {            try {                int k = viewPager.getCurrentItem();                int next = (k + 1) % imageList.size();                viewPager.setCurrentItem(next, true);            } catch (Exception e) {                e.printStackTrace();            }            mHandler.postDelayed(this, 5000);        }    }    class ImageViewPageAdapter extends PagerAdapter {        private List<Map<String, String>> imageList;        private List<View> mListViews;        public ImageViewPageAdapter(List<Map<String, String>> imageList,                                    List<View> mListViews) {            super();            this.imageList = imageList;            this.mListViews = mListViews;        }        public void setValue(List<Map<String, String>> imageList, List<View> mListViews) {            this.imageList = imageList;            this.mListViews = mListViews;        }        @Override        public void destroyItem(ViewGroup container, int position, Object object) {            container.removeView(mListViews.get(position));// 删除页卡        }        @Override        public int getCount() {            return mListViews.size();// 返回页卡的数量        }        @Override        public boolean isViewFromObject(View arg0, Object arg1) {            return arg0 == arg1;// 官方提示这样写        }        @Override        public Object instantiateItem(ViewGroup container, final int position) {            container.addView(mListViews.get(position), 0);// 添加页卡            ImageView view = (ImageView) mListViews.get(position);            view.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    if (StringUtils.notEmpty(imageList.get(position).get("imageLink"))) {                        Intent intent = new Intent(context, WebViewActivity.class);                        intent.putExtra("URL", imageList.get(position).get("imageLink"));                        context.startActivity(intent);                    }                }            });            if (StringUtils.notEmpty(imageList)) {                MFAQueryHelper.setImageView(view, CommConstants.URL_DOWN + imageList.get(position).get("imagePath"), 512, R.drawable.view_pager_screen1);            }            return mListViews.get(position);        }    }    Handler mHandler = new Handler();    public boolean isShowDel() {        return isShowDel;    }    @Override    public void reorderItems(int oldPosition, int newPosition) {        WorkTable temp = allList.get(oldPosition);        if (oldPosition < newPosition) {            for (int i = oldPosition; i < newPosition; i++) {                if (i == dragGridViewPage.getCustomerPostion()) {                    continue;                }                if (i == dragGridViewPage.getCustomerPostion() - 1) {                    Collections.swap(allList, i, i + 2);                } else {                    Collections.swap(allList, i, i + 1);                }            }        } else if (oldPosition > newPosition) {            for (int i = oldPosition; i > newPosition; i--) {                if (i == dragGridViewPage.getCustomerPostion()) {                    continue;                }                if (i == dragGridViewPage.getCustomerPostion() + 1) {                    Collections.swap(allList, i, i - 2);                } else {                    Collections.swap(allList, i, i - 1);                }            }        }        allList.set(newPosition, temp);        mFinallyPosition = newPosition;        if (oldPosition > dragGridViewPage.getCustomerPostion()) {            oldPosition -= 1;        }        if (newPosition > dragGridViewPage.getCustomerPostion()) {            newPosition -= 1;        }        WorkTable myTemp = list.get(oldPosition);        if (oldPosition < newPosition) {            for (int i = oldPosition; i < newPosition; i++) {                Collections.swap(list, i, i + 1);            }        } else if (oldPosition > newPosition) {            for (int i = oldPosition; i > newPosition; i--) {                Collections.swap(list, i, i - 1);            }        }        list.set(newPosition, myTemp);    }    @Override    public void setHideItem(int hidePosition) {        this.mHidePosition = hidePosition;        notifyDataSetChanged();    }    @Override    public void startDrag(View view, int postion) {        if (isShowDel) {            if (postion != mFinallyPosition) {                View show = dragGridViewPage.getChildAt(mFinallyPosition);                ImageView flag = (ImageView) show                        .findViewById(R.id.gridview_item_delImg);                flag.setVisibility(View.INVISIBLE);                show.setBackgroundResource(R.drawable.grid_item_selector);            }        }        view.setBackgroundResource(R.drawable.grid_item_selector);        ImageView flag = (ImageView) view.findViewById(R.id.gridview_item_delImg);        flag.setVisibility(View.VISIBLE);        mDragedPosition = postion;        mFinallyPosition = postion;        isShowDel = true;    }    @Override    public void stopDrag() {        View view = dragGridViewPage.getChildAt(mFinallyPosition);        View startView = dragGridViewPage.getChildAt(mDragedPosition);        startView.setBackgroundResource(R.drawable.grid_item_selector);        view.setBackgroundResource(R.drawable.grid_item_selector);        ImageView flag = (ImageView) view                .findViewById(R.id.gridview_item_delImg);        if (mDragedPosition == mFinallyPosition) {            if (mFinallyPosition != dragGridViewPage.getCustomerPostion()) {                flag.setVisibility(View.VISIBLE);                view.setBackgroundColor(0xfff0f0f0);            }        } else {            if (mFinallyPosition != dragGridViewPage.getCustomerPostion()) {                flag.setVisibility(View.INVISIBLE);                isShowDel = false;                handler.obtainMessage(34).sendToTarget();            }        }    }    @Override    public void clearDrag() {        if (mFinallyPosition != -1                && mFinallyPosition != dragGridViewPage.getCustomerPostion()) {            View view = dragGridViewPage.getChildAt(mFinallyPosition);            if (view != null) {                ImageView flag = (ImageView) view                        .findViewById(R.id.gridview_item_delImg);                view.setBackgroundResource(R.drawable.grid_item_selector);                if (flag != null) {                    flag.setVisibility(View.INVISIBLE);                }            }            isShowDel = false;        }        notifyDataSetChanged();    }}